

---------------------------------

PLOTTER: 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ncurses.h>
#include "functions.h"

/**
 * @brief Reads coordinates from a binary file and plots them in the terminal.
 * Coordinates are scaled to fit the current terminal dimensions.
 * @return 0 if the program exits successfully.
 */
int main() {
    const char *file_path = "mouse_data.dat";  // Binary file path
    FILE *input_file = fopen(file_path, "rb");

    if (!input_file) {
        perror("Error opening binary file");
        return 1;
    }

    // Initialize ncurses
    initscr();            // Start ncurses mode
    cbreak();             // Disable line buffering
    noecho();             // Don't show input on the screen
    curs_set(0);          // Hide the cursor

    int term_width, term_height;          // Terminal dimensions
    int base_width = 100, base_height = 25;  // Logical dimensions
    int x, y;                             // Raw coordinates from the file
    int scaled_x, scaled_y;               // Scaled coordinates for plotting
    int last_x = -1, last_y = -1;         // Last coordinates for tracing

    printf("Plotting mouse movements. Press Ctrl+C to stop.\n");

    // Main plotting loop
    while (fread(&x, sizeof(int), 1, input_file) == 1 &&
           fread(&y, sizeof(int), 1, input_file) == 1) {
        // Get current terminal dimensions
        GetTerminalDimensions(&term_width, &term_height);

        // Scale coordinates to current terminal size
        scaled_x = x * term_width / base_width;
        scaled_y = y * term_height / base_height;

        // Clamp scaled coordinates
        if (scaled_x < 0) scaled_x = 0;
        if (scaled_x >= term_width) scaled_x = term_width - 1;
        if (scaled_y < 0) scaled_y = 0;
        if (scaled_y >= term_height) scaled_y = term_height - 1;

        // Clear the last plotted character to create a tracing effect
        if (last_x != -1 && last_y != -1) {
            mvaddch(last_y, last_x, ' ');
        }

        // Plot the new coordinate
        mvaddch(scaled_y, scaled_x, '*');
        refresh();  // Update the terminal

        // Save the last plotted coordinate
        last_x = scaled_x;
        last_y = scaled_y;

        // Debug output
        printf("Raw X: %d, Y: %d | Scaled X: %d, Y: %d\n", x, y, scaled_x, scaled_y);

        // Wait 10ms
        usleep(10000);
    }

    // Cleanup
    endwin();  // Exit ncurses mode
    fclose(input_file);

    return 0;
}




------------------------
SAVER

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include "functions.h"

// Global variables
FILE *output_file = NULL;
float current_x = 50.0, current_y = 12.5;  // Logical start position
float min_x = 0, max_x = 100, min_y = 0, max_y = 25;  // Logical boundaries

/**
 * @brief Handle SIGINT to safely close the output file.
 */
void SignalHandler(int sig) {
    if (output_file) {
        fclose(output_file);
        printf("\nFile closed safely. Exiting...\n");
    }
    exit(0);
}

int main() {
    const char *device = "/dev/input/mice";
    int fd = open(device, O_RDONLY);
    if (fd == -1) {
        perror("Error opening mouse device");
        return 1;
    }

    // Open or create the binary file
    output_file = EnsureFileExists("mouse_data.dat");

    // Create the symbolic link
    CreateSymbolicLink();

    // Setup SIGINT handler
    signal(SIGINT, SignalHandler);

    signed char data[3];
    printf("Capturing mouse movements. Press Ctrl+C to stop.\n");

    while (1) {
        if (read(fd, data, sizeof(data)) > 0) {
            int dx = data[1];
            int dy = data[2];

            // Update absolute positions
            current_x += dx;
            current_y -= dy;

            // Clamp positions to logical terminal bounds
            if (current_x < min_x) current_x = min_x;
            if (current_x > max_x) current_x = max_x;
            if (current_y < min_y) current_y = min_y;
            if (current_y > max_y) current_y = max_y;

            // Save coordinates as integers
            int x_int = (int)current_x;
            int y_int = (int)current_y;
            fwrite(&x_int, sizeof(int), 1, output_file);
            fwrite(&y_int, sizeof(int), 1, output_file);

            // Debug output
            printf("Raw DX: %d, DY: %d | Absolute X: %.2f, Y: %.2f | Saved: (%d, %d)\n",
                   dx, dy, current_x, current_y, x_int, y_int);
        }
    }

    close(fd);
    return 0;
}
